{"version":3,"sources":["components/ProTip.tsx","components/Atoms/InputField.tsx","hooks/use-debounce.ts","components/Modecules/DropdownList.tsx","components/Organisms/Typeahead.tsx","components/Atoms/StockSymbol.tsx","components/Modecules/StockSymbolsArray.tsx","components/Organisms/ComboBox.tsx","components/Atoms/MessageBodyParser.tsx","utils/time-ago.ts","components/Atoms/MessageCard.tsx","components/Modecules/MessageList.tsx","utils/unique.ts","pages/Stock.tsx","App.tsx","themes/theme.ts","serviceWorker.ts","index.tsx"],"names":["LightBulbIcon","props","SvgIcon","d","useStyles","makeStyles","theme","root","margin","spacing","lightBulb","verticalAlign","marginRight","ProTip","classes","Typography","className","color","href","deleteButton","marginTop","marginBottom","position","right","InputField","label","onInputFieldChange","onInputFieldFocus","useState","keys","setKeys","debouncedKeys","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","noValidate","autoComplete","TextField","aria-autocomplete","fullWidth","id","onChange","e","preventDefault","currentTarget","onFocus","length","IconButton","aria-label","onClick","fontSize","DropdownList","menuItems","onItemClick","style","handleClose","event","MenuList","onKeyDown","key","map","item","MenuItem","symbol","title","createStyles","display","flexDirection","Typeahead","dropdownVisible","inputLabel","Box","StockSymbol","onSymbolDelete","count","messages","Chip","avatar","Avatar","background","onDelete","variant","justifyContent","flexWrap","listStyle","padding","chip","StockSymbolsArray","stockSymbols","component","ComboBox","inputLable","Link","text","target","textDecoration","MessageBodyParser","messageBody","symbols","match","replace","url","toUpperCase","link","links","Fragment","split","s","index","shift","indexOf","l","MONTH_NAMES","getFormattedDate","date","prefomattedDate","hideYear","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","toString","timeAgo","today","Date","yesterday","getTime","seconds","Math","round","isToday","toDateString","isYesterday","isThisYear","undefined","alignContent","alignItems","details","width","content","flex","whiteSpace","overflowWrap","cover","minWidth","height","MessageCard","message","created_at","postTime","setPostTime","setInterval","Card","CardMedia","image","user","avatar_url","CardContent","body","name","username","MessageList","uniqueDebuger","debug","uniqueArrayById","data","Array","from","Set","find","stockPageDebugger","fetchMessagesById","a","fetch","res","json","fetchStockSymbols","purgeMessages","offset","cutoffTime","now","filter","Stock","setMenuItems","setStockSymbols","symbolCount","setSymbolCount","setDropdownVisible","setMessages","messageCount","setMessageCount","showError","setShowError","showFetching","setShowFetching","refreshSymbolMessage","newMessages","sort","b","intervalId","clearInterval","forEach","m","findIndex","searchStockSymbols","selectSymbol","updateSymbols","parseInt","concat","Alert","severity","AppBar","updateMessages","Paper","marginLeft","Copyright","align","App","Container","maxWidth","my","gutterBottom","createMuiTheme","palette","primary","main","secondary","error","red","A400","default","Boolean","window","location","hostname","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8716b10d.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Link from \"@material-ui/core/Link\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction LightBulbIcon(props: any) {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\" />\n        </SvgIcon>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(6, 0, 3),\n    },\n    lightBulb: {\n        verticalAlign: \"middle\",\n        marginRight: theme.spacing(1),\n    },\n}));\n\nexport default function ProTip() {\n    const classes = useStyles();\n    return (\n        <Typography className={classes.root} color=\"textSecondary\">\n            <LightBulbIcon className={classes.lightBulb} />\n            Pro tip: See more <Link href=\"https://github.com/webdevic/STTail\">code</Link> on GitHub.\n        </Typography>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { TextField, IconButton, makeStyles } from \"@material-ui/core\";\nimport useDebounce from \"../../hooks/use-debounce\";\nimport BackspaceIcon from \"@material-ui/icons/Backspace\";\n\ntype IIFProps = {\n    label: string;\n    onInputFieldChange: (value: string) => void;\n    onInputFieldFocus?: (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    deleteButton: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        position: \"absolute\",\n        right: 0,\n    },\n}));\n\nconst InputField: React.FC<IIFProps> = (props) => {\n    const classes = useStyles();\n    const { label, onInputFieldChange, onInputFieldFocus } = props;\n    const [keys, setKeys] = useState(\"\");\n    const debouncedKeys = useDebounce(keys, 600);\n    useEffect(() => {\n        onInputFieldChange(debouncedKeys);\n    }, [debouncedKeys]);\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        e.preventDefault();\n        setKeys(e.currentTarget.value);\n    };\n    const handleReset = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        setKeys(\"\");\n    };\n    return (\n        <form noValidate autoComplete=\"off\">\n            <TextField\n                aria-autocomplete=\"none\"\n                autoComplete=\"\"\n                fullWidth\n                id=\"standard-basic\"\n                label={label}\n                onChange={handleInputChange}\n                value={keys}\n                onFocus={onInputFieldFocus}\n            />\n            {keys && keys.length > 0 && (\n                <IconButton aria-label=\"delete\" className={classes.deleteButton} onClick={handleReset}>\n                    <BackspaceIcon fontSize=\"small\" />\n                </IconButton>\n            )}\n        </form>\n    );\n};\n\nexport default InputField;\n","import { useState, useEffect } from \"react\";\n\n// Our hook\nexport default function useDebounce(value: string, delay: number) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Set debouncedValue to value (passed in) after the specified delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Return a cleanup function that will be called every time ...\n            // ... useEffect is re-called. useEffect will only be re-called ...\n            // ... if value changes (see the inputs array below).\n            // This is how we prevent debouncedValue from changing if value is ...\n            // ... changed within the delay period. Timeout gets cleared and restarted.\n            // To put it in context, if the user is typing within our app's ...\n            // ... search box, we don't want the debouncedValue to update until ...\n            // ... they've stopped typing for more than 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Only re-call effect if value changes\n        // You could also add the \"delay\" var to inputs array if you ...\n        // ... need to be able to change that dynamically.\n        [value, delay]\n    );\n\n    return debouncedValue;\n}\n","import React from \"react\";\nimport { MenuList, MenuItem } from \"@material-ui/core\";\n\ntype IDLProps = {\n    menuItems: any[];\n    onItemClick: (value: string) => void;\n    style?: React.CSSProperties;\n};\n\nconst DropdownList: React.FC<IDLProps> = (props) => {\n    const { menuItems, onItemClick, style } = props;\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\n        onItemClick((event.currentTarget as HTMLElement).id);\n    };\n    function handleListKeyDown(event: React.KeyboardEvent) {\n        if (event.key === \"Tab\") {\n            event.preventDefault();\n        }\n    }\n    return (\n        <MenuList onKeyDown={handleListKeyDown} style={style}>\n            {menuItems &&\n                menuItems.map((item: any) => (\n                    <MenuItem id={item.id} onClick={handleClose} key={item.symbol}>\n                        ${item.symbol} | {item.title}\n                    </MenuItem>\n                ))}\n        </MenuList>\n    );\n};\n\nexport default DropdownList;\n","import React from \"react\";\nimport { makeStyles, createStyles, Box } from \"@material-ui/core\";\nimport InputField from \"../Atoms/InputField\";\nimport DropdownList from \"../Modecules/DropdownList\";\n\ntype ITProps = {\n    inputLabel: string;\n    menuItems: any[];\n    onInputFieldChange: (value: string) => void;\n    onItemClick: (value: string) => void;\n    onInputFieldFocus: () => void;\n    dropdownVisible: boolean;\n};\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: 10,\n        },\n    })\n);\n\nconst Typeahead: React.FC<ITProps> = (props) => {\n    const classes = useStyles();\n    const { dropdownVisible, inputLabel, menuItems, onInputFieldChange, onItemClick, onInputFieldFocus } = props;\n    return (\n        <Box className={classes.root}>\n            <InputField\n                label={inputLabel}\n                onInputFieldChange={onInputFieldChange}\n                onInputFieldFocus={onInputFieldFocus}\n            />\n            <DropdownList\n                menuItems={menuItems}\n                onItemClick={onItemClick}\n                style={{ display: dropdownVisible && menuItems && menuItems.length > 0 ? \"block\" : \"none\" }}\n            />\n        </Box>\n    );\n};\n\nexport default Typeahead;\n","import React from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { Avatar } from \"@material-ui/core\";\n\ntype ISSProps = {\n    className?: string;\n    symbol: any;\n    onSymbolDelete: (value: string) => void;\n};\n\nconst StockSymbol: React.FC<ISSProps> = (props) => {\n    const { className, symbol, onSymbolDelete } = props;\n    const count = symbol.messages ? (symbol.messages.length > 999 ? \"999+\" : symbol.messages.length) : 0;\n    return (\n        <Chip\n            avatar={<Avatar style={{ background: \"#9999FF\" }}>{count}</Avatar>}\n            className={className}\n            color=\"primary\"\n            label={`$${symbol.symbol}`}\n            onDelete={() => onSymbolDelete(symbol.id)}\n            variant=\"outlined\"\n        />\n    );\n};\n\nexport default StockSymbol;\n","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport StockSymbol from \"../Atoms/StockSymbol\";\nimport { Box } from \"@material-ui/core\";\n\ntype ISSAProps = {\n    stockSymbols: any[];\n    onSymbolDelete: (value: string) => void;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            justifyContent: \"left\",\n            flexWrap: \"wrap\",\n            listStyle: \"none\",\n            padding: theme.spacing(0.5),\n            margin: 0,\n        },\n        chip: {\n            margin: theme.spacing(0.5),\n        },\n    })\n);\n\nconst StockSymbolsArray: React.FC<ISSAProps> = (props) => {\n    const { stockSymbols, onSymbolDelete } = props;\n    const classes = useStyles();\n\n    return (\n        <Box component=\"ul\" className={classes.root}>\n            {stockSymbols.map((symbol) => {\n                return (\n                    <li key={symbol.id}>\n                        <StockSymbol symbol={symbol} onSymbolDelete={onSymbolDelete} className={classes.chip} />\n                    </li>\n                );\n            })}\n        </Box>\n    );\n};\n\nexport default StockSymbolsArray;\n","import React from \"react\";\nimport Typeahead from \"./Typeahead\";\nimport StockSymbolsArray from \"../Modecules/StockSymbolsArray\";\n\ntype ICBProps = {\n    inputLable: string;\n    menuItems: any[];\n    stockSymbols: any[];\n    onInputFieldChange: (value: string) => void;\n    onItemClick: (value: string) => void;\n    onSymbolDelete: (value: string) => void;\n    onInputFieldFocus: () => void;\n    dropdownVisible: boolean;\n};\n\nconst ComboBox: React.FC<ICBProps> = (props) => {\n    const {\n        dropdownVisible,\n        inputLable,\n        menuItems,\n        stockSymbols,\n        onInputFieldChange,\n        onItemClick,\n        onSymbolDelete,\n        onInputFieldFocus,\n    } = props;\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Typeahead\n                dropdownVisible={dropdownVisible}\n                inputLabel={inputLable}\n                menuItems={menuItems}\n                onInputFieldChange={onInputFieldChange}\n                onItemClick={onItemClick}\n                onInputFieldFocus={onInputFieldFocus}\n            />\n            <StockSymbolsArray stockSymbols={stockSymbols} onSymbolDelete={onSymbolDelete} />\n        </div>\n    );\n};\n\nexport default ComboBox;\n","import React from \"react\";\n\ntype IMBPProps = {\n    messageBody: string;\n};\n\nconst Link: React.FC<{ href: string; text: string }> = (props) => {\n    const { href, text } = props;\n    return (\n        <a href={href} target=\"_blank\" style={{ textDecoration: \"none\", color: \"#607d8b\" }}>\n            {text}\n        </a>\n    );\n};\n\nconst MessageBodyParser: React.FC<IMBPProps> = (props) => {\n    let { messageBody } = props;\n    const symbols = messageBody.match(/\\$(.*?)(?=\\$)|\\$\\S+/gi)?.map((symbol) => {\n        symbol = symbol.replace(\" \", \"\");\n        const url = `https://stocktwits.com/symbol/${symbol.replace(\"$\", \"\").toUpperCase()}`;\n        messageBody = messageBody.replace(symbol, \"<S>\");\n        return { text: symbol, link: url };\n    });\n    const links = messageBody\n        .match(/(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gi)\n        ?.map((link) => {\n            messageBody = messageBody.replace(link, \"<L>\");\n            return { text: link, link };\n        });\n    return (\n        <React.Fragment>\n            {messageBody.split(\"<S>\").map((s, index) => {\n                const symbol = symbols?.shift();\n                return (\n                    <React.Fragment key={index}>\n                        {s.indexOf(\"<L>\") === -1\n                            ? s\n                            : s.split(\"<L>\").map((l, index) => {\n                                  const link = links?.shift();\n                                  return (\n                                      <React.Fragment key={index}>\n                                          {l}\n                                          {link && <Link text={link.text} href={link.link} />}\n                                      </React.Fragment>\n                                  );\n                              })}\n                        {symbol && <Link text={symbol.text} href={symbol.link} />}\n                    </React.Fragment>\n                );\n            })}\n        </React.Fragment>\n    );\n};\nexport default MessageBodyParser;\n","const MONTH_NAMES = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n];\n\nconst getFormattedDate = (date: Date, prefomattedDate?: string, hideYear = false) => {\n    const day = date.getDate();\n    const month = MONTH_NAMES[date.getMonth()];\n    const year = date.getFullYear();\n    const hours = date.getHours();\n    const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes().toString();\n\n    if (prefomattedDate) {\n        // Today at 10:20\n        // Yesterday at 10:20\n        return `${prefomattedDate} at ${hours}:${minutes}`;\n    }\n\n    if (hideYear) {\n        // 10 January at 10:20\n        return `${day} ${month} at ${hours}:${minutes}`;\n    }\n\n    // 10 January 2017. at 10:20\n    return `${day} ${month} ${year}. at ${hours}:${minutes}`;\n};\n\n/**\n *\n * @param dateParam\n */\nconst timeAgo = (date: Date) => {\n    if (!date) {\n        return null;\n    }\n    const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000\n    const today = new Date();\n    const yesterday = new Date(today.getTime() - DAY_IN_MS);\n    const seconds = Math.round((today.getTime() - date.getTime()) / 1000);\n    const minutes = Math.round(seconds / 60);\n    const isToday = today.toDateString() === date.toDateString();\n    const isYesterday = yesterday.toDateString() === date.toDateString();\n    const isThisYear = today.getFullYear() === date.getFullYear();\n\n    if (seconds < 5) {\n        return \"now\";\n    } else if (seconds < 60) {\n        return `${seconds} seconds ago`;\n    } else if (seconds < 90) {\n        return \"about a minute ago\";\n    } else if (minutes < 60) {\n        return `${minutes} minutes ago`;\n    } else if (isToday) {\n        return getFormattedDate(date, \"Today\"); // Today at 10:20\n    } else if (isYesterday) {\n        return getFormattedDate(date, \"Yesterday\"); // Yesterday at 10:20\n    } else if (isThisYear) {\n        return getFormattedDate(date, undefined, true); // 10. January at 10:20\n    }\n\n    return getFormattedDate(date); // 10. January 2017. at 10:20\n};\n\nexport default timeAgo;\n","import React, { useState } from \"react\";\nimport { makeStyles, createStyles, Card, CardContent, Typography, CardMedia } from \"@material-ui/core\";\nimport MessageBodyParser from \"./MessageBodyParser\";\nimport timeAgo from \"../../utils/time-ago\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-bewteen\",\n            alignContent: \"center\",\n            alignItems: \"center\",\n            margin: 20,\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\",\n        },\n        content: {\n            flex: \"1 0 auto\",\n            whiteSpace: \"pre-line\",\n            textDecoration: \"none\",\n            color: \"hotpink\",\n            overflowWrap: \"anywhere\",\n        },\n        cover: {\n            minWidth: 50,\n            height: 50,\n            margin: 20,\n        },\n    })\n);\n\nconst MessageCard: React.FC<{ message: any }> = (props) => {\n    const { message } = props;\n    const [postTime, setPostTime] = useState(timeAgo(new Date(message.created_at)));\n    const classes = useStyles();\n\n    setInterval(() => {\n        setPostTime(timeAgo(new Date(message.created_at)));\n    }, 1000);\n\n    return (\n        <Card className={classes.root}>\n            <CardMedia\n                className={classes.cover}\n                image={message.user.avatar_url ? message.user.avatar_url : \"/logo192.png\"}\n                title=\"Live from space album cover\"\n            />\n            <div className={classes.details}>\n                <CardContent className={classes.content}>\n                    <Typography component=\"h6\" variant=\"h6\">\n                        <MessageBodyParser messageBody={message.body} />\n                    </Typography>\n                    <Typography\n                        variant=\"subtitle1\"\n                        color=\"textSecondary\"\n                        style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}\n                    >\n                        <span>{message.user.name ? message.user.name : message.user.username}</span>\n                        <span>{postTime}</span>\n                    </Typography>\n                </CardContent>\n            </div>\n        </Card>\n    );\n};\n\nexport default MessageCard;\n","import React from \"react\";\nimport MessageCard from \"../Atoms/MessageCard\";\n\ntype IMLProps = {\n    messages: any[];\n};\n\nconst MessageList: React.FC<IMLProps> = (props) => {\n    const { messages } = props;\n    return (\n        <React.Fragment>\n            {messages.map((message: any) => (\n                <MessageCard message={message} key={message.id} />\n            ))}\n        </React.Fragment>\n    );\n};\n\nexport default MessageList;\n","import debug from \"debug\";\n\nconst uniqueDebuger = debug(\"unique utils\");\n\n/**\n *\n * @param data\n */\nexport const uniqueArrayById = (data: any[]) => {\n    uniqueDebuger(\"uniqueArrayById\", { data });\n    return Array.from(new Set(data.map((item) => item.id))).map((id) => {\n        return data.find((item) => item.id === id);\n    });\n};\n","import React, { useState, useEffect } from \"react\";\nimport ComboBox from \"../components/Organisms/ComboBox\";\nimport { AppBar, Paper } from \"@material-ui/core\";\nimport MessageList from \"../components/Modecules/MessageList\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport debug from \"debug\";\nimport { uniqueArrayById } from \"../utils/unique\";\n\nconst stockPageDebugger = debug(\"StockPage\");\n\nconst refreshInterval = 120000; // Refresh every 2 minutes\n\n/**\n *\n * @param id\n */\nconst fetchMessagesById = async (id: number): Promise<any[]> => {\n    try {\n        const res = await fetch(`/api/v1/message/${id}`);\n        return res.json();\n    } catch (error) {\n        throw error;\n    }\n};\n\n/**\n *\n * @param keys\n */\nconst fetchStockSymbols = async (keys: string): Promise<any[]> => {\n    try {\n        const res = await fetch(`/api/v1/symbol/search?keys=${keys}`);\n        return res.json();\n    } catch (error) {\n        throw error;\n    }\n};\n\n/**\n * Purge Messages with given offset hours\n * @param messages\n * @param offset\n */\nconst purgeMessages = (messages: any[], offset: number = 12): any[] => {\n    const cutoffTime = Date.now() - offset * 60 * 60 * 1000;\n    return messages.filter((message) => new Date(message.created_at).getTime() > cutoffTime);\n};\n\nconst Stock = () => {\n    const [menuItems, setMenuItems] = useState<any[]>([]);\n    const [stockSymbols, setStockSymbols] = useState<any[]>([]);\n    const [symbolCount, setSymbolCount] = useState(0);\n    const [dropdownVisible, setDropdownVisible] = useState(false);\n    const [messages, setMessages] = useState<any[]>([]);\n    const [messageCount, setMessageCount] = useState(0);\n    const [showError, setShowError] = useState(false);\n    const [showFetching, setShowFetching] = useState(false);\n\n    // useEffect\n    const refreshSymbolMessage = async () => {\n        let newMessages: any[] = [...messages];\n        for (let symbol of stockSymbols) {\n            setShowFetching(true);\n            newMessages = uniqueArrayById([...newMessages, ...(await fetchMessagesById(symbol.id))]);\n            if (newMessages.length > 300) newMessages = purgeMessages(newMessages);\n            setMessages(newMessages.sort((a, b) => b.id - a.id));\n            setShowFetching(false);\n        }\n    };\n    // Reset message refresh when stockSymbols updated\n    // Remember to all values from the component scope (such as props and state)\n    // that change over time and that are used by the effect.\n    useEffect(() => {\n        stockPageDebugger(\"stockSymbols Changed:\", { stockSymbols });\n        if (symbolCount > 0) {\n            const intervalId = setInterval(() => {\n                refreshSymbolMessage();\n            }, refreshInterval);\n\n            return () => clearInterval(intervalId);\n        }\n    }, [symbolCount, messages, setMessages]);\n    // Reset message count\n    useEffect(() => {\n        if (messages) {\n            stockPageDebugger(\"Message Count: \", messages.length, stockSymbols);\n            setMessageCount(messages.length);\n            stockSymbols.forEach(\n                (symbol: any) =>\n                    (symbol.messages = messages.filter(\n                        (m: any) => m.symbols.findIndex((s: any) => s.id === symbol.id) !== -1\n                    ))\n            );\n            setStockSymbols(stockSymbols);\n        }\n    }, [messages]);\n\n    // handle DOM actions\n    const searchStockSymbols = async (keys: string) => {\n        if (keys) {\n            setMenuItems(await fetchStockSymbols(keys));\n            setDropdownVisible(true);\n        } else {\n            setMenuItems([]);\n            setDropdownVisible(false);\n        }\n    };\n    const selectSymbol = async (id: string) => {\n        setDropdownVisible(false);\n        if (stockSymbols.length >= 10) {\n            setShowError(true);\n            return;\n        }\n        const updateSymbols = stockSymbols\n            .filter((symbol: any) => symbol.id !== parseInt(id))\n            .concat(menuItems.filter((item: any) => item.id === parseInt(id)));\n        setStockSymbols(updateSymbols);\n        setSymbolCount(updateSymbols.length);\n        setShowFetching(true);\n        setMessages(\n            uniqueArrayById([...messages, ...(await fetchMessagesById(parseInt(id)))]).sort((a, b) => b.id - a.id)\n        );\n        setShowFetching(false);\n    };\n    const deleteSymbol = (id: string) => {\n        if (stockSymbols.length <= 10) {\n            setShowError(false);\n        }\n        const updateMessages = messages.filter((message: any) => {\n            if (message.symbols.findIndex((symbol: any) => symbol.id === parseInt(id)) === -1) return true;\n            return false;\n        });\n        const updateSymbols = stockSymbols.filter((symbol: any) => symbol.id !== parseInt(id));\n        updateSymbols.forEach(\n            (symbol: any) =>\n                (symbol.messages = updateMessages.filter(\n                    (message) => message.symbols.findIndex((s: any) => s.id === symbol.id) !== -1\n                ))\n        );\n        setMessages(updateMessages);\n        setStockSymbols(updateSymbols);\n        setSymbolCount(updateSymbols.length);\n    };\n    const showDropdown = () => {\n        setDropdownVisible(true);\n    };\n    return (\n        <React.Fragment>\n            <Alert severity=\"error\" style={{ marginBottom: 10, display: showError ? \"flex\" : \"none\" }}>\n                Free API only supports 10 Symbols!\n            </Alert>\n            <AppBar position=\"sticky\" color=\"default\">\n                <ComboBox\n                    dropdownVisible={dropdownVisible}\n                    inputLable=\"Search for stock(s), eg: AAPL or AAPL,BABA,BAC, etc...\"\n                    menuItems={menuItems}\n                    stockSymbols={stockSymbols}\n                    onInputFieldChange={searchStockSymbols}\n                    onItemClick={selectSymbol}\n                    onSymbolDelete={deleteSymbol}\n                    onInputFieldFocus={showDropdown}\n                />\n            </AppBar>\n            <Paper variant=\"outlined\" style={{ background: \"#ffcc80\" }}>\n                <Alert\n                    severity=\"info\"\n                    style={{\n                        marginTop: 20,\n                        marginBottom: 20,\n                        marginLeft: 50,\n                        marginRight: 50,\n                        display: !showFetching ? \"flex\" : \"none\",\n                    }}\n                >\n                    Total Tweets: {messageCount}.\n                </Alert>\n                <Alert\n                    severity=\"success\"\n                    style={{\n                        marginTop: 20,\n                        marginBottom: 20,\n                        marginLeft: 50,\n                        marginRight: 50,\n                        display: showFetching ? \"flex\" : \"none\",\n                    }}\n                >\n                    Fetching messages...\n                </Alert>\n                <MessageList messages={messages} />\n            </Paper>\n        </React.Fragment>\n    );\n};\n\nexport default Stock;\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Link from \"@material-ui/core/Link\";\nimport ProTip from \"./components/ProTip\";\nimport Stock from \"./pages/Stock\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"right\">\n            {\"Copyright © \"}\n            <Link color=\"inherit\" href=\"https://haos.io/\">\n                STTail\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n\nexport default function App() {\n    return (\n        <Container maxWidth=\"sm\">\n            <Box my={4}>\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                    StockTwits Tail\n                </Typography>\n                <Stock />\n                <ProTip />\n                <Copyright />\n            </Box>\n        </Container>\n    );\n}\n","import { red } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#556cd6\",\n        },\n        secondary: {\n            main: \"#19857b\",\n        },\n        error: {\n            main: red.A400,\n        },\n        background: {\n            default: \"#fff\",\n        },\n    },\n});\n\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport App from \"./App\";\nimport theme from \"./themes/theme\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <App />\n    </ThemeProvider>,\n    document.querySelector(\"#root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}